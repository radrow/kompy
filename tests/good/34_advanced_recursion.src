# Test: Recursive functions with complex conditions and multiple call patterns
# Expected: 2181fibonacci_recursive8

int fibonacci(int n) {
    if n <= 0 {
        return 0;
    } else {
        if n == 1 {
            return 1;
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }
}

int gcd(int a, int b) {
    if b == 0 {
        return a;
    } else {
        if a > b {
            return gcd(b, a % b);
        } else {
            return gcd(a, b % a);
        }
    }
}

int ackermann(int m, int n) {
    if m == 0 {
        return n + 1;
    } else {
        if n == 0 {
            return ackermann(m - 1, 1);
        } else {
            return ackermann(m - 1, ackermann(m, n - 1));
        }
    }
}

string get_function_name(int choice) {
    if choice == 1 {
        return "fibonacci";
    } else {
        if choice == 2 {
            return "gcd";
        } else {
            if choice == 3 {
                return "ackermann";
            } else {
                return "unknown";
            }
        }
    }
}

void main() {
    # Test Fibonacci sequence
    print_int(fibonacci(8));  # fib(8) = 21
    
    # Test GCD with recursive calls
    print_int(gcd(24, 16));  # gcd(24, 16) = 8
    
    # Test Ackermann function - A(0,0) = 1
    print_int(ackermann(0, 0));  # A(0,0) = 0+1 = 1
    
    # Test function selection with complex nested calls
    if get_function_name(1) == "fibonacci" {
        print_string("fibonacci_recursive");
        
        # More complex recursive test - computing Fib(6) instead of 11 to avoid stack overflow
        print_int(fibonacci(6));  # Should be 8
    }
}
